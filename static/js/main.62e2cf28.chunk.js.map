{"version":3,"sources":["services/cookie.service.js","use-global.js","components/auth/auth-route.jsx","config.js","services/api-request.js","components/version-holder.js","services/version.service.js","components/common/input.jsx","components/auth/login.jsx","services/auth.service.js","components/auth/register.jsx","components/auth/status.jsx","components/auth/anon-route.jsx","components/rooms/rooms-list.jsx","services/room.service.js","services/game.service.js","components/rooms/current-room.jsx","components/rooms/new-room.jsx","components/rooms/rooms-router.jsx","services/web-socket.js","serviceWorker.js","index.js","App.js"],"names":["CookieService","key","value","expireDays","expirationDate","Date","now","msDay","document","cookie","toUTCString","split","map","val","find","ckey","pastDate","forEach","delete","initialState","isOnline","apiVersion","authToken","get","isAuthenticated","user","counter","rooms","game","GameRoomId","playerBoards","_usePlayerBoard","store","Id","state","p","pb","setState","filter","actions","setOnline","status","setApiVersion","addToCounter","setUserData","AuthToken","id","name","Name","set","clearUserData","setRooms","setUserJoin","setPlayerBoard","EntityType","Color","IsDone","Money","setUserLeave","setPlayerBoards","setPlayerColor","playerBoard","console","warn","setPlayerIsDone","useGlobal","globalHook","React","AuthRoute","children","rest","render","location","to","pathname","from","apiUrl","apiRequest","endpoint","a","async","fetch","response","ok","json","data","Promise","reject","webVersion","require","version","VersionHolder","useEffect","then","className","Input","props","isFocused","this","label","helperText","icon","errorText","onChange","isEmpty","length","hasError","cx","type","event","target","onFocus","onBlur","title","Component","Login","useState","username","setUsername","password","setPassword","errorMessage","setErrorMessage","history","useHistory","useLocation","onClick","headers","method","body","JSON","stringify","logIn","debug","replace","catch","error","message","Register","register","Status","gameRoomId","lastActivityTime","getStatus","push","encodeURIComponent","AnonRoute","RoomList","onRoomJoin","roomId","joinRoom","getRoomList","room","UserCount","toggleReady","CurrentRoom","_roomId","useParams","decodeURIComponent","getGameStatus","PlayerBoards","currentRoom","r","onChangeColor","userId","changeColor","boardsSorted","sortBy","allReady","every","b","board","style","color","isReady","onToggleReady","leaveRoom","disabled","NewRoom","RoomsIndex","path","useRouteMatch","exact","fixWsJson","startsWith","substring","indexOf","ws","isConnected","globals","BroadcastReason","Users","wsDebug","parse","reducer","resolve","WebSocket","addEventListener","send","Type","close","Boolean","window","hostname","match","ReactDOM","global","connect","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.62e2cf28.chunk.js","sourcesContent":["export default class CookieService {\n  static msDay = 24 * 60 * 60 * 1000;\n\n  static set(key, value, expireDays = 1) {\n    const expirationDate = new Date(\n      Date.now() + expireDays * CookieService.msDay,\n    );\n\n    document.cookie = `${key}=${value};expires=${expirationDate.toUTCString()};path=/`;\n  }\n\n  static get(key) {\n    const cookies = document.cookie.split('; ').map(val => val.split('='));\n\n    const [, value] = cookies.find(([ckey, value]) => ckey === key) || [\n      null,\n      null,\n    ];\n\n    return value;\n  }\n\n  static delete(key) {\n    const pastDate = new Date(0);\n    document.cookie = `${key}=;expires=${pastDate.toUTCString()};path=/`;\n  }\n\n  static clear() {\n    const cookies = document.cookie.split('; ').map(val => val.split('='));\n\n    cookies.forEach(([key]) => CookieService.delete(key));\n  }\n}\n","import React from 'react';\nimport globalHook from 'use-global-hook';\n\nimport CookieService from './services/cookie.service';\n\nconst initialState = {\n  isOnline: false,\n  apiVersion: null,\n  //todo: get token from cookie?\n  authToken: CookieService.get('authToken'),\n  isAuthenticated: false,\n  user: null,\n  counter: 0,\n  rooms: [],\n  //game\n  game: {\n    GameRoomId: null,\n    playerBoards: [],\n  },\n};\n\nfunction _usePlayerBoard(store, { Id }) {\n  const playerBoard = store.state.game.playerBoards.find(p => p.Id === Id);\n\n  return [\n    playerBoard,\n    pb => {\n      store.setState({\n        game: {\n          ...store.state.game,\n          playerBoards: [\n            ...store.state.game.playerBoards.filter(p => p.Id !== Id),\n            pb,\n          ],\n        },\n      });\n    },\n  ];\n}\n\nconst actions = {\n  //common\n  setOnline(store, status = true) {\n    store.setState({ isOnline: status });\n  },\n  setApiVersion(store, apiVersion) {\n    store.setState({ apiVersion });\n  },\n  //debug\n  addToCounter(store, value) {\n    store.setState({\n      counter: store.state.counter + 1,\n    });\n  },\n  //user-data\n  setUserData(store, { AuthToken: authToken, Id: id, Name: name, GameRoomId }) {\n    store.setState({\n      authToken,\n      user: { id, name },\n      isAuthenticated: true,\n      game: {\n        ...store.state.game,\n        GameRoomId,\n      },\n    });\n\n    CookieService.set('authToken', authToken);\n  },\n  clearUserData(store) {\n    store.setState({\n      authToken: null,\n      user: null,\n      isAuthenticated: false,\n    });\n    CookieService.delete('authToken');\n  },\n  //rooms\n  setRooms(store, rooms) {\n    store.setState({\n      rooms,\n    });\n  },\n  setUserJoin(store, user) {\n    //{EntityType: \"User\", Id: \"u#88173017\", Name: \"kekster2000\"}\n    //lack of:\n    // {\n    //       Color: 4,\n    //       EntityType: 'PlayerBoard',\n    //       Id: 'u#88173017',\n    //       IsDone: false,\n    //       Money: 0,\n    //       Name: 'kekster2000',\n    //     }\n\n    const [, setPlayerBoard] = _usePlayerBoard(store, { Id: user.Id });\n\n    const newPlayerBoard = {\n      ...user,\n      //defaults that izya zajopilsya prislat'\n      EntityType: 'PlayerBoard',\n      Color: 0,\n      IsDone: false,\n      Money: 0,\n    };\n\n    setPlayerBoard(newPlayerBoard);\n  },\n  setUserLeave(store, { Id }) {\n    store.setState({\n      game: {\n        ...store.state.game,\n        playerBoards: [\n          ...store.state.game.playerBoards.filter(p => p.Id !== Id),\n        ],\n      },\n    });\n  },\n  //game\n  setPlayerBoards(store, playerBoards) {\n    store.setState({\n      game: {\n        ...store.state.game,\n        playerBoards,\n      },\n    });\n  },\n  setPlayerColor(store, { Id, Color }) {\n    const [playerBoard, setPlayerBoard] = _usePlayerBoard(store, { Id });\n\n    if (!playerBoard) return console.warn(`${Id} not found`);\n    playerBoard.Color = Color;\n\n    setPlayerBoard(playerBoard);\n  },\n  setPlayerIsDone(store, { Id, IsDone }) {\n    const [playerBoard, setPlayerBoard] = _usePlayerBoard(store, { Id });\n    if (!playerBoard) return console.warn(`${Id} not found`);\n\n    playerBoard.IsDone = IsDone;\n\n    setPlayerBoard(playerBoard);\n  },\n};\n\nexport const useGlobal = globalHook(React, initialState, actions);\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nimport { useGlobal } from \"../../use-global\";\n\nexport function AuthRoute({ children, ...rest }) {\n  const [{ isAuthenticated }] = useGlobal();\n\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        isAuthenticated ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/login\",\n              state: { from: location }\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n","export const apiUrl = 'https://pg-api.azurewebsites.net/api';\nexport const wsUrl = 'wss://pg-api.azurewebsites.net/api';\n","import { apiUrl } from \"../config\";\n\nexport async function apiRequest(endpoint, ...rest) {\n  try {\n    const response = await fetch(`${apiUrl}/${endpoint}`, ...rest);\n\n    if (!response.ok) {\n      throw await response.json();\n    }\n\n    const json = await response.json();\n    return json.data;\n  } catch (error) {\n    console.warn(\"api error\", error);\n\n    return Promise.reject(error);\n  }\n}\n","import React, { useEffect } from \"react\";\n\nimport { useGlobal } from \"../use-global\";\nimport { getApiVersion } from \"../services/version.service\";\nimport \"./version-holder.css\";\n\nconst { version: webVersion } = require(\"../../package.json\");\n\nexport default function VersionHolder() {\n  const [{ apiVersion }, { setApiVersion, setOnline }] = useGlobal();\n\n  useEffect(() => {\n    getApiVersion().then(apiVersion => {\n      setApiVersion(apiVersion);\n      setOnline(true);\n    });\n  }, []);\n\n  return (\n    <div className=\"version-holder flex-column m-1\">\n      <span>web: {webVersion}</span>\n      <span>api: {apiVersion}</span>\n    </div>\n  );\n}\n","import { apiRequest } from \"./api-request\";\n\nexport async function getApiVersion() {\n  return apiRequest(\"version\").then(data => data.version);\n}\n","import React from \"react\";\nimport cx from \"classnames\";\n\nimport \"./input.css\";\n\nexport default class Input extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isFocused: false\n    };\n  }\n\n  render() {\n    const { label, value, helperText, icon, errorText, onChange } = this.props;\n    const { isFocused } = this.state;\n    const isEmpty = value.length === 0;\n    const hasError = !!errorText;\n\n    return (\n      <label\n        className={cx(\"input cursor-pointer\", {\n          \"is-focused\": isFocused,\n          \"is-empty\": isEmpty,\n          \"has-error\": hasError\n        })}\n      >\n        <div className=\"input-body flex-row justify-between\">\n          <div className=\"flex-column justify-center position-relative w-100 px-2\">\n            <div className=\"input-label\">{label}</div>\n\n            <input\n              className=\"input-value w-100\"\n              type=\"text\"\n              value={value}\n              onChange={event => onChange(event.target.value)}\n              onFocus={() => this.setState({ isFocused: true })}\n              onBlur={() => this.setState({ isFocused: false })}\n            />\n          </div>\n          {icon && !hasError && (\n            <i className=\"input-icon material-icons flex-row align-center mx-2\">\n              {icon}\n            </i>\n          )}\n          {hasError && (\n            <i className=\"error-icon material-icons flex-row align-center mx-2\">\n              error\n            </i>\n          )}\n        </div>\n        <hr className=\"m-0\" />\n        <div className=\"input-footer flex-row ml-2\">\n          {helperText && !hasError && (\n            <span className=\"helper-text text-ellipsis\" title={helperText}>\n              {helperText}\n            </span>\n          )}\n          {hasError && (\n            <span className=\"error-text text-ellipsis\" title={errorText}>\n              {errorText}\n            </span>\n          )}\n        </div>\n      </label>\n    );\n  }\n}\n","import React, { useState } from 'react';\nimport { useHistory, useLocation, Link } from 'react-router-dom';\n\nimport Input from '../common/input';\nimport { logIn } from '../../services/auth.service';\nimport { useGlobal } from '../../use-global';\n\nexport default function Login() {\n  const [{}, { setUserData }] = useGlobal();\n  const [username, setUsername] = useState('kekster2000');\n  const [password, setPassword] = useState('qwerty123');\n  const [errorMessage, setErrorMessage] = useState(null);\n  const history = useHistory();\n  const location = useLocation();\n\n  const { from } = location.state || { from: { pathname: '/' } };\n\n  const onLogIn = () => {\n    logIn({ username, password })\n      .then(data => {\n        setUserData(data);\n        console.debug('login ok', data);\n        history.replace(from);\n      })\n      .catch(error => {\n        console.warn('login failed', error);\n        setErrorMessage(error.message);\n      });\n  };\n\n  return (\n    <div className=\"form flex-column\">\n      <Input\n        label=\"username\"\n        value={username}\n        helperText=\"username should be strong enough\"\n        errorText={errorMessage}\n        icon=\"face\"\n        onChange={value => setUsername(value)}\n      />\n      <Input\n        label=\"password\"\n        value={password}\n        helperText=\"keep password simple\"\n        icon=\"lock\"\n        onChange={value => setPassword(value)}\n      />\n\n      <button\n        className=\"button flex-row align-center justify-center\"\n        onClick={onLogIn}\n      >\n        <span>log in</span>\n        <i className=\"material-icons\">arrow_forward</i>\n      </button>\n      <span className=\"p-2 flex-row justify-between\">\n        Don't have an account?\n        <Link to=\"/register\">register</Link>\n      </span>\n    </div>\n  );\n}\n","import { apiRequest } from \"./api-request\";\n\nexport function logIn({ username, password }) {\n  return apiRequest(\"auth/login\", {\n    // todo(vmyshko): make common\n    headers: {\n      \"Content-type\": \"application/json\"\n    },\n    method: \"POST\",\n    body: JSON.stringify({ username, password })\n  });\n}\n\nexport function register({ username, password }) {\n  return apiRequest(\"auth/register\", {\n    // todo(vmyshko): make common\n    headers: {\n      \"Content-type\": \"application/json\"\n    },\n    method: \"POST\",\n    body: JSON.stringify({ username, password })\n  });\n}\n\nexport function getStatus(authToken) {\n  return (\n    apiRequest(\"auth/status\", {\n      // todo(vmyshko): make common\n      headers: {\n        \"Content-type\": \"application/json\",\n        authToken\n      },\n      method: \"POST\",\n      body: JSON.stringify({\n        gameRoomId: true,\n        lastActivityTime: true,\n        isOnline: true,\n        authToken: true,\n        id: true,\n        name: true\n      })\n    })\n      // todo(vmyshko): izya to fix this data.data\n      .then(data => data.data)\n  );\n}\n","import React, { useState } from 'react';\nimport { useHistory, useLocation, Link } from 'react-router-dom';\n\nimport Input from '../common/input';\nimport { register } from '../../services/auth.service';\nimport { useGlobal } from '../../use-global';\n\nexport default function Register() {\n  const [{}, { setUserData }] = useGlobal();\n  const [username, setUsername] = useState('jailbot007');\n  const [password, setPassword] = useState('kek123');\n  const [errorMessage, setErrorMessage] = useState(null);\n  const history = useHistory();\n  const location = useLocation();\n\n  const { from } = location.state || { from: { pathname: '/' } };\n\n  const onRegister = () => {\n    register({ username, password })\n      .then(data => {\n        setUserData(data);\n        console.debug('register ok:', data);\n        history.replace(from);\n      })\n      .catch(error => {\n        console.warn('register failed:', error.message);\n        setErrorMessage(error.message);\n      });\n  };\n\n  return (\n    <div className=\"form flex-column\">\n      <Input\n        label=\"username\"\n        value={username}\n        helperText=\"username should be strong enough\"\n        errorText={errorMessage}\n        icon=\"face\"\n        onChange={value => setUsername(value)}\n      />\n      <Input\n        label=\"password\"\n        value={password}\n        helperText=\"keep password simple\"\n        icon=\"lock\"\n        onChange={value => setPassword(value)}\n      />\n\n      <button\n        className=\"button flex-row align-center justify-center\"\n        onClick={onRegister}\n      >\n        <span>register</span>\n        <i className=\"material-icons\">add_box</i>\n      </button>\n      <span className=\"p-2 flex-row justify-between\">\n        Already have an account?\n        <Link to=\"/login\">log in</Link>\n      </span>\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\n\nimport { getStatus } from \"../../services/auth.service\";\n\nimport \"./status.css\";\nimport { useGlobal } from \"../../use-global\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default function Status() {\n  const history = useHistory();\n  const [\n    { authToken, isAuthenticated, user },\n    { setUserData, clearUserData }\n  ] = useGlobal();\n\n  useEffect(() => {\n    authToken &&\n      !isAuthenticated &&\n      getStatus(authToken)\n        .then(data => {\n          setUserData(data);\n\n          //if user in room - redirect\n          if (data.GameRoomId) {\n            history.push(`rooms/${encodeURIComponent(data.GameRoomId)}`);\n          }\n        })\n        .catch(clearUserData);\n  }, []);\n\n  return (\n    <div className=\"status flex-column align-end p-1\">\n      {isAuthenticated ? (\n        <div className=\"flex-row align-center\">\n          <div className=\"flex-row align-center mx-2\">\n            <i className=\"material-icons px-1\">face</i>\n            <span>{user.name}</span>\n          </div>\n\n          <button\n            className=\"button flex-row align-center px-3\"\n            onClick={clearUserData}\n          >\n            <span> log out</span>\n            <i className=\"material-icons\">exit_to_app</i>\n          </button>\n        </div>\n      ) : (\n        <div>unauthorized</div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nimport { useGlobal } from \"../../use-global\";\n\nexport function AnonRoute({ children, ...rest }) {\n  const [{ isAuthenticated }] = useGlobal();\n\n  return (\n    <Route\n      {...rest}\n      render={() => (!isAuthenticated ? children : <Redirect to=\"/\" />)}\n    />\n  );\n}\n","import React, { useEffect } from 'react';\n\nimport { useGlobal } from '../../use-global';\nimport { getRoomList, joinRoom } from '../../services/room.service';\nimport { useHistory } from 'react-router-dom';\n\nimport './rooms.css';\n\nexport default function RoomList() {\n  const history = useHistory();\n  const [{ authToken, rooms }, { setRooms }] = useGlobal();\n\n  const onRoomCreate = () => {\n    history.push(`/rooms/new`);\n  };\n\n  const onRoomJoin = roomId => {\n    joinRoom(authToken, roomId).then(data => {\n      // todo(vmyshko): get rid of # in game object ids (izya)\n      history.push(`/rooms/${encodeURIComponent(roomId)}`);\n    });\n  };\n\n  useEffect(() => {\n    getRoomList(authToken).then(rooms => {\n      setRooms(rooms);\n    });\n  }, []);\n\n  return (\n    <div className=\"rooms form flex-column p-2\">\n      <h1 className=\"m-2\">rooms</h1>\n      <ul className=\"room-list list flex-column p-1 m-2\">\n        {rooms\n          //[...rooms, ...rooms, ...rooms]\n          //.filter(r => !r.IsInGame)\n          .map(room => (\n            <li\n              className=\"list-item flex-row align-center p-2 m-1\"\n              key={room.Id}\n            >\n              <span className=\"room-name fill-left\">{room.Name}</span>\n\n              <div className=\"flex-row align-center\">\n                <i className=\"material-icons\">group</i>\n                <span className=\"px-1\">{room.UserCount}</span>\n\n                <button className=\"button\" onClick={() => onRoomJoin(room.Id)}>\n                  join\n                </button>\n              </div>\n            </li>\n          ))}\n      </ul>\n\n      <button\n        className=\"button flex-row align-center justify-center m-2\"\n        onClick={onRoomCreate}\n      >\n        <span>create new room</span>\n        <i className=\"material-icons\">add_box</i>\n      </button>\n    </div>\n  );\n}\n","import { apiRequest } from \"./api-request\";\n\nexport function getRoomList(authToken) {\n  return apiRequest(\"room/list\", {\n    // todo(vmyshko): make common\n    headers: {\n      \"Content-type\": \"application/json\",\n      authToken\n    },\n    method: \"GET\"\n    //body: JSON.stringify({ username, password })\n  });\n}\n\nexport function joinRoom(authToken, roomId) {\n  return apiRequest(\"room/join\", {\n    // todo(vmyshko): make common\n    headers: {\n      \"Content-type\": \"application/json\",\n      authToken\n    },\n    method: \"POST\",\n    body: JSON.stringify({ roomId })\n  });\n}\n\nexport function leaveRoom(authToken) {\n  return apiRequest(\"room/leave\", {\n    // todo(vmyshko): make common\n    headers: {\n      \"Content-type\": \"application/json\",\n      authToken\n    },\n    method: \"POST\"\n    //body: JSON.stringify({ roomId })\n  });\n}\n","import { apiRequest } from \"./api-request\";\n\nexport function getGameStatus(authToken) {\n  return apiRequest(\"game/status\", {\n    // todo(vmyshko): make common\n    headers: {\n      \"Content-type\": \"application/json\",\n      authToken\n    },\n    method: \"GET\"\n    //body: JSON.stringify({ roomId })\n  });\n}\n\nexport function changeColor(authToken, userId) {\n  return apiRequest(\"game/changeColor\", {\n    // todo(vmyshko): make common\n    headers: {\n      \"Content-type\": \"application/json\",\n      authToken\n    },\n    method: \"POST\",\n    body: JSON.stringify({ userId })\n  });\n}\n\nexport function toggleReady(authToken, state = true) {\n  return apiRequest(\"game/toggleReady\", {\n    // todo(vmyshko): make common\n    headers: {\n      \"Content-type\": \"application/json\",\n      authToken\n    },\n    method: \"POST\",\n    body: JSON.stringify({ state })\n  });\n}\n","import React, { useEffect } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { sortBy } from 'lodash';\n\nimport {\n  getGameStatus,\n  changeColor,\n  toggleReady,\n} from '../../services/game.service';\nimport { useGlobal } from '../../use-global';\nimport { leaveRoom } from '../../services/room.service';\n\nexport default function CurrentRoom() {\n  const { _roomId } = useParams();\n  const history = useHistory();\n  const roomId = decodeURIComponent(_roomId);\n\n  const [{ authToken, rooms, game }, { setPlayerBoards }] = useGlobal();\n  const { playerBoards } = game;\n\n  useEffect(() => {\n    getGameStatus(authToken).then(data => {\n      setPlayerBoards(data.PlayerBoards);\n    });\n  }, []);\n\n  const currentRoom = rooms.find(r => r.Id === roomId);\n\n  if (!currentRoom) return null;\n\n  const onLeave = () => {\n    leaveRoom(authToken).then(() => {\n      history.push('/rooms');\n    });\n  };\n\n  const onChangeColor = userId => {\n    //change for yourself or for another if admin?\n    //seems it always change mine, no matter what userid was sent\n    changeColor(authToken, userId).then(() => {\n      //refresh\n    });\n  };\n  const onToggleReady = (userId, isReady = true) => {\n    //todo: just check for current\n    //todo:save current state and toggle on/off\n    toggleReady(authToken, isReady).then(() => {\n      //refresh\n    });\n  };\n  const onGameStart = () => {};\n  const onAddBot = () => {};\n  const onKick = playerId => {};\n\n  const boardsSorted = sortBy(playerBoards, 'Id');\n\n  const allReady = boardsSorted.every(b => b.IsDone);\n\n  return (\n    <div className=\"form flex-column p-2\">\n      <h1 className=\"flex-row m-2\">\n        <span className=\"fill-left\">{currentRoom.Name}</span>\n\n        <div className=\"flex-row align-center\">\n          <i className=\"material-icons\">group</i>\n          <span className=\"px-1\">{boardsSorted.length}</span>\n        </div>\n      </h1>\n\n      <ul className=\"player-list list flex-column p-1 m-2\">\n        {boardsSorted.map(board => (\n          <li\n            className=\"list-item flex-row align-center p-2 m-1\"\n            key={board.Id}\n          >\n            <div className=\"player-name flex-row fill-left align-center\">\n              <i\n                className={`city-icon color-${board.Color} cursor-pointer`}\n                onClick={() => onChangeColor(board.Id)}\n              />\n              <span className=\"px-2\">{board.Name}</span>\n            </div>\n\n            <i\n              className=\"material-icons cursor-pointer mx-2\"\n              onClick={() => onKick(board.Id)}\n            >\n              delete\n            </i>\n            <i\n              className=\"material-icons cursor-pointer mx-1\"\n              style={{\n                color: board.IsDone ? 'gold' : 'gray',\n              }}\n              onClick={() => onToggleReady(board.Id, !board.IsDone)}\n            >\n              {board.IsDone ? 'thumb_up' : 'thumb_down'}\n            </i>\n          </li>\n        ))}\n      </ul>\n      <div className=\"flex-row align-center\">\n        <button className=\"button mx-1\" onClick={onLeave}>\n          leave\n        </button>\n        <div className=\"fill-left\"></div>\n        <button className=\"button mx-1\" onClick={onAddBot}>\n          add bot\n        </button>\n        <button\n          className={'button mx-1'}\n          disabled={!allReady}\n          onClick={onGameStart}\n        >\n          start game\n        </button>\n      </div>\n    </div>\n  );\n}\n\n// PlayerBoards: [\n//   {\n//     EntityType: \"PlayerBoard\",\n//     Id: \"u#890a5bf3\",\n//     Name: \"Max\",\n//     Color: 0,\n//     Money: 0,\n//     IsDone: false\n//   },\n//   {\n//     EntityType: \"PlayerBoard\",\n//     Id: \"u#88173017\",\n//     Name: \"kekster2000\",\n//     Color: 7,\n//     Money: 0,\n//     IsDone: false\n//   }\n// ];\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function NewRoom() {\n  return (\n    <div className=\"form flex-column p-2\">\n      <h1 className=\"flex-row m-2\">\n        <span className=\"fill-left\">create room</span>\n      </h1>\n\n      <div className=\"flex-row align-center\">\n        <Link to=\"/rooms\">\n          <button className=\"button mx-1\">quit</button>\n        </Link>\n        <div className=\"fill-left\"></div>\n\n        <button className=\"button mx-1\">create room</button>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Switch, Route, useRouteMatch } from 'react-router-dom';\n\nimport RoomsList from './rooms-list';\nimport CurrentRoom from './current-room';\nimport NewRoom from './new-room';\n\nexport default function RoomsIndex() {\n  const { path } = useRouteMatch();\n\n  return (\n    <Switch>\n      <Route exact path={path}>\n        <RoomsList />\n      </Route>\n      <Route path={`${path}/new`}>\n        <NewRoom />\n      </Route>\n      <Route path={`${path}/:_roomId`}>\n        <CurrentRoom />\n      </Route>\n    </Switch>\n  );\n}\n","import { wsUrl } from '../config';\n\n// todo(vmyshko): temporary solution, since Izya sends dirty json-like string with time prefix\n\nfunction fixWsJson(message = '') {\n  if (message.startsWith('{')) {\n    return message;\n  }\n\n  return message.substring(message.indexOf('{'));\n}\n\nclass PgWebSocket {\n  ws = null;\n  isConnected = false;\n\n  reducer(message) {\n    const [\n      {},\n      { setPlayerColor, setPlayerIsDone, setUserJoin, setUserLeave },\n    ] = this.globals;\n\n    switch (message.BroadcastReason) {\n      case '/api/game/changecolor': {\n        const [board] = message.PlayerBoards;\n        setPlayerColor(board);\n        break;\n      }\n      case '/api/game/toggleready': {\n        const [board] = message.PlayerBoards;\n        setPlayerIsDone(board);\n        break;\n      }\n      case '/api/room/join': {\n        // todo(vmyshko): this is izya's server shit, need to get new board here\n        const [user] = message.Users;\n        setUserJoin(user);\n        break;\n      }\n      case '/api/room/leave': {\n        // todo(vmyshko): same reason same entity - different data. fuckin izya...\n        if (!message.Users) return;\n\n        const [user] = message.Users;\n        setUserLeave(user);\n        break;\n      }\n      default: {\n        console.warn('unhandled reason', message.BroadcastReason, message);\n      }\n    }\n  }\n\n  async connect(globals) {\n    this.globals = globals;\n    const [{ authToken }, { setOnline }] = globals;\n\n    const wsMarker = '🌐ws:';\n    const wsDebug = event => {\n      switch (event.type) {\n        case 'message': {\n          const message = JSON.parse(fixWsJson(event.data) || null);\n          console.debug(wsMarker, event.type, message);\n\n          this.reducer(message);\n\n          break;\n        }\n\n        case 'close': {\n          setOnline(false);\n          console.debug(wsMarker, event.type, event.data);\n          break;\n        }\n\n        default: {\n          console.debug(wsMarker, event.type, event);\n        }\n      }\n    };\n\n    await new Promise((resolve, reject) => {\n      this.ws = new WebSocket(wsUrl);\n\n      this.ws.addEventListener('open', data => {\n        this.isConnected = true;\n        resolve(data);\n        wsDebug(data);\n      });\n\n      this.ws.addEventListener('message', wsDebug);\n      this.ws.addEventListener('close', wsDebug);\n    });\n\n    this.send({\n      AuthToken: authToken,\n      Type: 'AUTHSTATUS',\n    });\n  }\n\n  send(data) {\n    this.ws.send(JSON.stringify(data));\n  }\n\n  disconnect() {\n    this.ws.close();\n  }\n}\n\nexport const ws = new PgWebSocket();\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useEffect } from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\nimport cx from 'classnames';\n\nimport { AuthRoute } from './components/auth/auth-route';\nimport VersionHolder from './components/version-holder';\nimport Login from './components/auth/login';\nimport Register from './components/auth/register';\nimport Status from './components/auth/status';\n\nimport { useGlobal } from './use-global';\nimport { AnonRoute } from './components/auth/anon-route';\nimport RoomsRouter from './components/rooms/rooms-router';\n\nimport './App.css';\nimport { ws } from './services/web-socket';\n\nexport default function App() {\n  const global = useGlobal();\n  const [{ isOnline }, {}] = global;\n\n  useEffect(() => {\n    if (!isOnline) return;\n\n    ws.connect(global);\n  }, [isOnline]);\n\n  return (\n    <Router>\n      <div className={cx('app', { 'is-online': isOnline })}>\n        <VersionHolder />\n        <Status />\n\n        <Switch>\n          {/* AUTH */}\n          <AnonRoute path=\"/login\">\n            <Login />\n          </AnonRoute>\n          <AnonRoute path=\"/register\">\n            <Register />\n          </AnonRoute>\n          {/* ROOMS */}\n          <AuthRoute path=\"/rooms\">\n            <RoomsRouter />\n          </AuthRoute>\n          {/* GAME */}\n          {/* // todo(vmyshko): add intermediate page that would define where to redirect user */}\n          <Route path=\"/\">\n            <Redirect to=\"/rooms\" />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n"],"sourceRoot":""}