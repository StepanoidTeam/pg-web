{"version":3,"sources":["assets/pg-icon.svg","services/version.service.js","components/version-holder.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","getVersion","a","async","fetch","then","data","json","version","VersionHolder","useState","hasError","setErrors","setVersion","useEffect","catch","err","style","color","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","isOnline","setOnline","className","cx","src","logo","alt","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,qC,yNCEpC,SAAeC,IAAf,SAAAC,EAAAC,OAAA,yEACEC,MAAM,GAAD,OAHC,uCAGD,aACTC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GAAI,OAAIA,EAAKA,KAAKE,YAHrB,qCCEQ,SAASC,IAAiB,IAAD,EACRC,oBAAS,GADD,mBAC/BC,EAD+B,KACrBC,EADqB,OAERF,oBAAS,GAFD,mBAE/BF,EAF+B,KAEtBK,EAFsB,KAgBtC,OANAC,qBAAU,WANV,EAAAZ,EAAAC,OAAA,gDACEF,IACGI,MAAK,SAAAG,GAAO,OAAIK,EAAWL,MAC3BO,OAAM,SAAAC,GAAG,OAAIJ,EAAUI,MAH5B,wCAUAf,IAGE,yBAAKgB,MAAO,CAAEC,MAAO,UAClBV,EAAU,0CAAgBA,GAAkB,aAE5CG,EAAW,4CAAkBQ,KAAKC,UAAUT,IAAoB,MCZnDU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCED,WAAgB,IAAD,EACEjB,oBAAS,GADX,mBACrBkB,EADqB,KACXC,EADW,KAO5B,OAJAf,qBAAU,WACRb,IAAaI,MAAK,kBAAMwB,GAAU,SAIlC,yBAAKC,UAAWC,IAAG,MAAO,CAAE,YAAaH,KACvC,yBAAKI,IAAKC,IAAMH,UAAU,WAAWI,IAAI,SAEzC,kBAACzB,EAAD,SDbU,MAAS0B,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,kB","file":"static/js/main.ce7268b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pg-icon.e035a70d.svg\";","const apiUrl = \"http://pg-api.azurewebsites.net/api/\";\n\nexport async function getVersion() {\n  return fetch(`${apiUrl}/version`)\n    .then(data => data.json())\n    .then(data => data.data.version);\n}\n","import React, { useState, useEffect } from \"react\";\n\nimport { getVersion } from \"../services/version.service\";\n\nexport default function VersionHolder() {\n  const [hasError, setErrors] = useState(false);\n  const [version, setVersion] = useState(false);\n\n  async function fetchData() {\n    getVersion()\n      .then(version => setVersion(version))\n      .catch(err => setErrors(err));\n  }\n\n  useEffect(() => {\n    fetchData();\n  });\n\n  getVersion();\n\n  return (\n    <div style={{ color: \"white\" }}>\n      {version ? <span>api ver: {version}</span> : \"loading...\"}\n\n      {hasError ? <span>Has error: {JSON.stringify(hasError)}</span> : null}\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect } from \"react\";\nimport cx from \"classnames\";\n\nimport logo from \"./assets/pg-icon.svg\";\nimport \"./App.css\";\nimport VersionHolder from \"./components/version-holder\";\nimport { getVersion } from \"./services/version.service\";\n\nexport default function App() {\n  const [isOnline, setOnline] = useState(false);\n\n  useEffect(() => {\n    getVersion().then(() => setOnline(true));\n  });\n\n  return (\n    <div className={cx(\"app\", { \"is-online\": isOnline })}>\n      <img src={logo} className=\"app-logo\" alt=\"logo\" />\n\n      <VersionHolder />\n    </div>\n  );\n}\n"],"sourceRoot":""}